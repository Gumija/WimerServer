{"version":3,"sources":["../src/visits.js"],"names":["visits","insert","selectByUserId","router","Router","post","req","res","userId","decode","params","documentId","user","id","console","log","body","format","Date","query","error","results","field","sendStatus","get","result","document_id","encode","document_user_id","json"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,SAAS;AACXC,UACA;;oCAFW;AAKXC,kBACA;;;;;;AANW,CAAb;;AAcA,IAAIC,SAAS,kBAAQC,MAAR,EAAb;;AAEA;AACAD,OAAOE,IAAP,CAAY,sBAAZ,EAAoC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChD,MAAIC,SAAS,iBAAOC,MAAP,CAAcH,IAAII,MAAJ,CAAWF,MAAzB,CAAb;AACA,MAAIG,aAAa,iBAAOF,MAAP,CAAcH,IAAII,MAAJ,CAAWC,UAAzB,CAAjB;AACA,MAAIL,IAAIM,IAAJ,IAAYN,IAAIM,IAAJ,CAASC,EAAT,IAAeL,MAA/B,EAAuC;;AAErCM,YAAQC,GAAR,CAAY,UAAZ,EAAwBT,IAAII,MAA5B;AACAI,YAAQC,GAAR,CAAY,QAAZ,EAAsBT,IAAIU,IAA1B;AACAF,YAAQC,GAAR,CAAY,gBAAME,MAAN,CAAajB,OAAOC,MAApB,EAA4B,CACtCK,IAAIM,IAAJ,CAASC,EAD6B,EAEtCF,UAFsC,EAGtCH,MAHsC,EAItC,IAAIU,IAAJ,EAJsC,EAKtC,IAAIA,IAAJ,EALsC,CAA5B,CAAZ;AAOA,iBAASC,KAAT,CAAe,gBAAMF,MAAN,CAAajB,OAAOC,MAApB,EAA4B,CACzCK,IAAIM,IAAJ,CAASC,EADgC,EAEzCF,UAFyC,EAGzCH,MAHyC,EAIzC,IAAIU,IAAJ,EAJyC,EAKzC,IAAIA,IAAJ,EALyC,CAA5B,CAAf,EAOE,UAACE,KAAD,EAAQC,OAAR,EAAiBC,KAAjB,EAA2B;AACzB,UAAIF,KAAJ,EAAW;AACTN,gBAAQC,GAAR,CAAYK,KAAZ;AACAb,YAAIgB,UAAJ,CAAe,GAAf;AACA;AACD;AACDT,cAAQC,GAAR,CAAYM,OAAZ;AACAd,UAAIgB,UAAJ,CAAe,GAAf;AACD,KAfH;AAiBD,GA5BD,MA4BO;AACLhB,QAAIgB,UAAJ,CAAe,GAAf,EADK,CACgB;AACtB;AACF,CAlCD;;AAoCA;AACApB,OAAOqB,GAAP,CAAW,GAAX,EAAgB,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC5B,MAAID,IAAIM,IAAR,EAAc;AACZ,iBAASO,KAAT,CAAe,gBAAMF,MAAN,CAAajB,OAAOE,cAApB,EAAoC,CAACI,IAAIM,IAAJ,CAASC,EAAV,CAApC,CAAf,EACE,UAACO,KAAD,EAAQC,OAAR,EAAiBC,KAAjB,EAA2B;AACzB,UAAIF,KAAJ,EAAW;AACTN,gBAAQC,GAAR,CAAYK,KAAZ;AACAb,YAAIgB,UAAJ,CAAe,GAAf;AACA;AACD;AACDT,cAAQC,GAAR,CAAYM,OAAZ;AANyB;AAAA;AAAA;;AAAA;AAOzB,6BAAkBA,OAAlB,8HAA2B;AAAA,cAAnBI,MAAmB;;AACzBA,iBAAOC,WAAP,GAAqB,iBAAOC,MAAP,CAAcF,OAAOC,WAArB,CAArB;AACAD,iBAAOG,gBAAP,GAA0B,iBAAOD,MAAP,CAAcF,OAAOG,gBAArB,CAA1B;AACD;AAVwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWzBrB,UAAIsB,IAAJ,CAASR,OAAT;AACD,KAbH;AAeD,GAhBD,MAgBO;AACLd,QAAIsB,IAAJ,CAAS,EAAT;AACD;AACF,CApBD;;kBAsBe1B,M","file":"visits.js","sourcesContent":["\nimport express from 'express';\nimport dbIniter from './db/db';\nimport mysql from 'mysql';\nimport hasher from './hasher';\n\nlet visits = {\n  insert:\n  'INSERT INTO visits \\\n   VALUES (?, ?, ?, ?) \\\n   ON DUPLICATE KEY UPDATE date = ?',\n  selectByUserId:\n  'SELECT v.document_id, v.document_user_id, v.date , d.title \\\n   FROM visits v\\\n   JOIN documents d ON v.document_id = d.id \\\n\t\t\t\t\t\t\t\t\t\tAND v.document_user_id = d.user_id\\\n   WHERE v.user_id = ? \\\n   ORDER BY v.date DESC;'\n}\n\nlet router = express.Router();\n\n// add visit\nrouter.post('/:documentId/:userId', (req, res) => {\n  let userId = hasher.decode(req.params.userId);\n  let documentId = hasher.decode(req.params.documentId);\n  if (req.user && req.user.id == userId) {\n\n    console.log('PARAMS: ', req.params)\n    console.log('BODY: ', req.body)\n    console.log(mysql.format(visits.insert, [\n      req.user.id,\n      documentId,\n      userId,\n      new Date(),\n      new Date(),\n    ]));\n    dbIniter.query(mysql.format(visits.insert, [\n      req.user.id,\n      documentId,\n      userId,\n      new Date(),\n      new Date(),\n    ]),\n      (error, results, field) => {\n        if (error) {\n          console.log(error);\n          res.sendStatus(500);\n          return;\n        }\n        console.log(results);\n        res.sendStatus(200);\n      }\n    )\n  } else {\n    res.sendStatus(403); // 403 Forbidden\n  }\n})\n\n// get visits by user\nrouter.get('/', (req, res) => {\n  if (req.user) {\n    dbIniter.query(mysql.format(visits.selectByUserId, [req.user.id]),\n      (error, results, field) => {\n        if (error) {\n          console.log(error);\n          res.sendStatus(500);\n          return;\n        }\n        console.log(results);\n        for(let result of results) {\n          result.document_id = hasher.encode(result.document_id);\n          result.document_user_id = hasher.encode(result.document_user_id);\n        }\n        res.json(results);\n      }\n    )\n  } else {\n    res.json({});\n  }\n})\n\nexport default router;"]}