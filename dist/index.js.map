{"version":3,"sources":["../src/index.js"],"names":["GOOGLE_CLIENT_ID","process","env","GOOGLE_CLIENT_SECRET","users","selectByGoogleId","selectById","insert","update","dbIniter","initDB","serializeUser","user","done","console","log","id","deserializeUser","obj","query","format","error","results","fields","use","OAuth2Strategy","clientID","clientSecret","callbackURL","passReqToCallback","request","accessToken","refreshToken","profile","nextTick","length","displayName","emails","find","email","type","value","insertId","name","google_id","app","buildFolderPath","DATABASE_URL","resolve","__dirname","static","json","secret","resave","saveUninitialized","initialize","session","get","req","res","next","header","authenticate","scope","approvalPrompt","successRedirect","failureRedirect","destroy","err","sendStatus","sendFile","set","PORT","listen"],"mappings":"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","file":"index.js","sourcesContent":["import bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport express from 'express';\nimport session from 'express-session';\nimport morgan from 'morgan';\nimport mysql from 'mysql';\nimport passport from 'passport';\nimport GoogleAuth from 'passport-google-oauth';\nimport path from 'path';\nimport DbIniter from './db/db';\nimport visitsHandler from './visits';\nimport documentsHandler from './documents';\nimport highlightHandler from './highlights';\n\n// API Access link for creating client ID and secret:\n// https://code.google.com/apis/console/\nvar GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID\n  , GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\n\nlet users = {\n  selectByGoogleId:\n  'SELECT * \\\n   FROM users \\\n   WHERE google_id = ?',\n  selectById:\n  'SELECT * \\\n   FROM users \\\n   WHERE id = ?',\n  insert:\n  'INSERT INTO users \\\n    VALUES (0, ?, ?, ?)',\n  update:\n  'UPDATE user \\\n   SET name = ?, email = ?, google_id = ? \\\n   WHERE id = ?'\n}\n\nlet dbIniter = DbIniter;\ndbIniter.initDB();\n\n// Passport session setup.\n//   To support persistent login sessions, Passport needs to be able to\n//   serialize users into and deserialize users out of the session.  Typically,\n//   this will be as simple as storing the user ID when serializing, and finding\n//   the user by ID when deserializing.  However, since this example does not\n//   have a database of user records, the complete Google profile is\n//   serialized and deserialized.\npassport.serializeUser(function (user, done) {\n  console.log('Serialize:', user.id)\n  done(null, user.id);\n});\n\npassport.deserializeUser(function (obj, done) {\n  dbIniter.query(mysql.format(users.selectById, [obj]),\n    (error, results, fields) => {\n      if (error) {\n        console.log(error);\n        done(error);\n        return;\n      }\n      console.log(`Deserialize user by user id, ${obj}`, results);\n      return done(null, results[0]);\n    });\n});\n\n// Use the GoogleStrategy within Passport.\n//   Strategies in Passport require a `verify` function, which accept\n//   credentials (in this case, an accessToken, refreshToken, and Google\n//   profile), and invoke a callback with a user object.\npassport.use(new GoogleAuth.OAuth2Strategy({\n  clientID: GOOGLE_CLIENT_ID,\n  clientSecret: GOOGLE_CLIENT_SECRET,\n  callbackURL: \"http://morning-stream-82096.herokuapp.com/auth/google/callback\",\n  passReqToCallback: true\n},\n  (request, accessToken, refreshToken, profile, done) => {\n    console.log('Access Token: ', accessToken)\n    console.log('Refresh Token: ', refreshToken)\n    process.nextTick(() => {\n      // Check if user exists with google id\n      dbIniter.query(mysql.format(users.selectByGoogleId, [profile.id]),\n        (error, results, fields) => {\n          if (error) {\n            console.log(error);\n            done(error);\n            return;\n          }\n          console.log(`Get user by googleId ${profile.id}`, results);\n          if (results.length) {\n            return done(null, results[0]);\n          } else {\n            // Add new user to database\n            dbIniter.query(mysql.format(users.insert,\n              [\n                profile.displayName,\n                profile.emails.find((email) => email.type == 'account').value,\n                profile.id,\n              ]),\n              (error, results, fields) => {\n                if (error) {\n                  console.log(error);\n                  done(error);\n                  return;\n                }\n                console.log(`Inserted user`, results);\n                return done(null, {\n                  id: results.insertId,\n                  name: profile.displayName,\n                  email: profile.emails.find((email) => email.type == 'account').value,\n                  google_id: profile.id,\n                });\n              }\n            )\n          }\n        }\n      )\n    })\n  }\n));\n\n\n\nlet app = express();\n\nlet buildFolderPath = process.env.DATABASE_URL ? path.resolve(__dirname, './', 'WimerReact/build')\n  : path.resolve(__dirname, '..', 'WimerReact/build')\n// logger\napp.use(morgan(':remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] :response-time ms'));\n// Serve static assets\napp.use(express.static(buildFolderPath));\napp.use(cookieParser());\napp.use(bodyParser.json());\napp.use(session({\n  secret: 'cookie_secret',\n  resave: true,\n  saveUninitialized: true,\n}));\napp.use(passport.initialize());\napp.use(passport.session());\n\n// GET /auth/google\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  The first step in Google authentication will involve\n//   redirecting the user to google.com.  After authorization, Google\n//   will redirect the user back to this application at /auth/google/callback\napp.get('/auth/google', (req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n},\n  passport.authenticate('google', {\n    scope: [\n      'https://www.googleapis.com/auth/plus.login',\n      'https://www.googleapis.com/auth/plus.profile.emails.read'],\n    approvalPrompt: 'force'\n  }));\n\n// GET /auth/google/callback\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  If authentication fails, the user will be redirected back to the\n//   login page.  Otherwise, the primary route function function will be called,\n//   which, in this example, will redirect the user to the home page.\napp.get('/auth/google/callback',\n  passport.authenticate('google', {\n    successRedirect: 'back',\n    failureRedirect: 'back',\n  }));\n\napp.get('/logout', (req, res) => {\n  req.session.destroy(function (err) {\n    //Inside a callback… bulletproof!\n    res.sendStatus(200);\n  });\n})\n\napp.use('/highlight', highlightHandler);\napp.use('/documents', documentsHandler);\napp.use('/visits', visitsHandler);\n\napp.get('/user', (req, res) => {\n  if (req.user) {\n    res.json(req.user);\n  } else {\n    res.json({});\n  }\n})\n\n// Always return the main index.html, so react-router render the route in the client\napp.get('*', (req, res) => {\n  console.log(\"dirname:\", __dirname)\n  console.log('--------- INDEX.HTML path:', path.resolve(__dirname, '..', 'WimerReact/build', 'index.html'));\n  console.log('--------- INDEX.HTML path:', path.resolve(__dirname, './', 'WimerReact/build', 'index.html'));\n  if (process.env.DATABASE_URL) {\n    res.sendFile(path.resolve(buildFolderPath, 'index.html'));\n  } else {\n    res.sendFile(path.resolve(buildFolderPath, 'index.html'));\n  }\n});\n\napp.set('port', (process.env.PORT || 3001));\n\napp.listen(app.get('port'), () => {\n  console.log(`App listening on port ${app.get(\"port\")}!`);\n});"]}