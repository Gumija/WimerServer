{"version":3,"sources":["../src/index.js"],"names":["GOOGLE_CLIENT_ID","process","env","GOOGLE_CLIENT_SECRET","console","log","serializeUser","user","done","deserializeUser","obj","use","Strategy","clientID","clientSecret","callbackURL","passReqToCallback","request","accessToken","refreshToken","profile","nextTick","dbIniter","initDB","documents","insert","selectAll","selectById","update","highlights","delete","selectByDocumentAndUser","app","upload","dest","buildFolderPath","DATABASE_URL","resolve","__dirname","static","json","secret","name","proxy","resave","saveUninitialized","initialize","session","get","authenticate","scope","successRedirect","failureRedirect","req","res","query","format","params","documentId","userId","error","results","fields","sendStatus","body","id","post","start","end","class","container","download","path","title","parseInt","field","single","file","originalname","mimetype","encoding","insertId","sendFile","set","PORT","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA;AACA,IAAIA,mBAAmBC,QAAQC,GAAR,CAAYF,gBAAnC;AAAA,IACIG,uBAAuBF,QAAQC,GAAR,CAAYC,oBADvC;AAEAC,QAAQC,GAAR,CAAY,eAAZ,EAA6BL,gBAA7B,EAA+CG,oBAA/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAASG,aAAT,CAAuB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC3CJ,UAAQC,GAAR,CAAY,WAAZ,EAAyBE,IAAzB;AACAC,OAAK,IAAL,EAAWD,IAAX;AACD,CAHD;;AAKA,mBAASE,eAAT,CAAyB,UAAUC,GAAV,EAAeF,IAAf,EAAqB;AAC5CJ,UAAQC,GAAR,CAAY,aAAZ,EAA2BK,GAA3B;AACAF,OAAK,IAAL,EAAWE,GAAX;AACD,CAHD;;AAKA;AACA;AACA;AACA;AACA,mBAASC,GAAT,CAAa,IAAI,8BAAWC,QAAf,CAAwB;AACnCC,YAAUb,gBADyB;AAEnCc,gBAAcX,oBAFqB;AAGnC;AACA;AACA;AACA;AACA;AACA;AACAY,eAAa,gEATsB;AAUnCC,qBAAmB;AAVgB,CAAxB,EAYX,UAAUC,OAAV,EAAmBC,WAAnB,EAAgCC,YAAhC,EAA8CC,OAA9C,EAAuDZ,IAAvD,EAA6D;AAC3D;AACAJ,UAAQC,GAAR,CAAY,iBAAZ,EAA+Ba,WAA/B,EAA4CC,YAA5C,EAA0DC,OAA1D,EAAmEZ,IAAnE;AACAP,UAAQoB,QAAR,CAAiB,YAAY;;AAE3B;AACA;AACA;AACA;AACAjB,YAAQC,GAAR,CAAY,SAAZ,EAAuBe,OAAvB;AACA,WAAOZ,KAAK,IAAL,EAAWY,OAAX,CAAP;AACD,GARD;AASD,CAxBU,CAAb;;AA2BA,IAAIE,WAAW,kBAAf;AACAA,SAASC,MAAT;;AAEA,IAAIC,YAAY;AACdC,UACA;4BAFc;AAIdC,aACA;oBALc;AAOdC,cACA;;kBARc;AAWdC,UACA;;;AAZc,CAAhB;;AAiBA,IAAIC,aAAa;AACfJ,UACA;kCAFe;AAIfK,UACA;;;qBALe;AASfC,2BACA;;;;AAVe,CAAjB;;AAgBA,IAAIC,MAAM,wBAAV;AACA,IAAIC,SAAS,sBAAO,EAAEC,MAAM,UAAR,EAAP,CAAb;;AAEA,IAAIC,kBAAkBlC,QAAQC,GAAR,CAAYkC,YAAZ,GAA2B,eAAKC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,kBAA9B,CAA3B,GAClB,eAAKD,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,kBAA9B,CADJ;AAEA;AACAN,IAAIrB,GAAJ,CAAQ,sBAAO,2HAAP,CAAR;AACA;AACAqB,IAAIrB,GAAJ,CAAQ,kBAAQ4B,MAAR,CAAeJ,eAAf,CAAR;AACAH,IAAIrB,GAAJ,CAAQ,qBAAW6B,IAAX,EAAR;AACAR,IAAIrB,GAAJ,CAAS,8BAAQ;AAChB8B,UAAQ,eADQ;AAEhBC,QAAQ,cAFQ;AAGhBC,SAAQ,IAHQ;AAIbC,UAAQ,IAJK;AAKbC,qBAAmB;AALN,CAAR,CAAT;AAOAb,IAAIrB,GAAJ,CAAQ,mBAASmC,UAAT,EAAR;AACAd,IAAIrB,GAAJ,CAAQ,mBAASoC,OAAT,EAAR;;AAEA;AACA;AACA;AACA;AACA;AACAf,IAAIgB,GAAJ,CAAQ,cAAR,EAAwB,mBAASC,YAAT,CAAsB,QAAtB,EAAgC;AACtDC,SAAO,CACL,4CADK,EAEL,0DAFK;AAD+C,CAAhC,CAAxB;;AAMA;AACA;AACA;AACA;AACA;AACAlB,IAAIgB,GAAJ,CAAQ,uBAAR,EACE,mBAASC,YAAT,CAAsB,QAAtB,EAAgC;AAC9BE,mBAAiB,GADa;AAE9BC,mBAAiB;AAFa,CAAhC,CADF;;AAQApB,IAAIgB,GAAJ,CAAQ,gCAAR,EAA0C,UAACK,GAAD,EAAMC,GAAN,EAAc;AACtDhC,WAASiC,KAAT,CAAe,gBAAMC,MAAN,CAAa3B,WAAWE,uBAAxB,EACb,CACEsB,IAAII,MAAJ,CAAWC,UADb,EAEEL,IAAII,MAAJ,CAAWE,MAFb,CADa,CAAf,EAME,UAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC1B,QAAIF,KAAJ,EAAW;AACTxD,cAAQC,GAAR,CAAYuD,KAAZ;AACAN,UAAIS,UAAJ,CAAe,GAAf;AACA;AACD;AACD3D,YAAQC,GAAR,CAAYwD,OAAZ;AACAP,QAAId,IAAJ,CAASqB,OAAT;AACD,GAdH;AAgBD,CAjBD;;AAmBA7B,IAAIF,MAAJ,CAAW,YAAX,EAAyB,UAACuB,GAAD,EAAMC,GAAN,EAAc;AACrChC,WAASiC,KAAT,CAAe,gBAAMC,MAAN,CAAa3B,WAAWC,MAAxB,EACb,CACEuB,IAAIW,IAAJ,CAASC,EADX,EAEEZ,IAAIW,IAAJ,CAASN,UAFX,EAGEL,IAAIW,IAAJ,CAASL,MAHX,CADa,CAAf,EAOE,UAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC1B,QAAIF,KAAJ,EAAW;AACTxD,cAAQC,GAAR,CAAYuD,KAAZ;AACAN,UAAIS,UAAJ,CAAe,GAAf;AACA;AACD;AACD3D,YAAQC,GAAR,CAAYyD,MAAZ;AACAR,QAAIS,UAAJ,CAAe,GAAf;AACD,GAfH;AAiBD,CAlBD;;AAoBA/B,IAAIkC,IAAJ,CAAS,YAAT,EAAuB,UAACb,GAAD,EAAMC,GAAN,EAAc;AACnC;AACAhC,WAASiC,KAAT,CAAe,gBAAMC,MAAN,CAAa3B,WAAWJ,MAAxB,EACb,CACE4B,IAAIW,IAAJ,CAASC,EADX,EAEEZ,IAAIW,IAAJ,CAASG,KAFX,EAGEd,IAAIW,IAAJ,CAASI,GAHX,EAIEf,IAAIW,IAAJ,CAASK,KAJX,EAKEhB,IAAIW,IAAJ,CAASM,SALX,EAMEjB,IAAIW,IAAJ,CAASN,UANX,EAOEL,IAAIW,IAAJ,CAASL,MAPX,CADa,CAAf,EAWE,UAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC1B,QAAIF,KAAJ,EAAW;AACTxD,cAAQC,GAAR,CAAYuD,KAAZ;AACAN,UAAIS,UAAJ,CAAe,GAAf;AACA;AACD;AACD3D,YAAQC,GAAR,CAAYwD,OAAZ;AACAP,QAAIS,UAAJ,CAAe,GAAf;AACD,GAnBH;AAqBD,CAvBD;;AAyBA/B,IAAIgB,GAAJ,CAAQ,yBAAR,EAAmC,UAACK,GAAD,EAAMC,GAAN,EAAc;AAC/ClD,UAAQC,GAAR,CAAY,gBAAMmD,MAAN,CAAahC,UAAUG,UAAvB,EAAmC,CAAC0B,IAAII,MAAJ,CAAWQ,EAAZ,CAAnC,CAAZ;AACA3C,WAASiC,KAAT,CAAe,gBAAMC,MAAN,CAAahC,UAAUG,UAAvB,EAAmC,CAAC0B,IAAII,MAAJ,CAAWQ,EAAZ,CAAnC,CAAf,EACE,UAACL,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC1B,QAAIF,KAAJ,EAAW;AACTxD,cAAQC,GAAR,CAAYuD,KAAZ;AACAN,UAAIS,UAAJ,CAAe,GAAf;AACA;AACD;AACD3D,YAAQC,GAAR,CAAYwD,OAAZ;AACAP,QAAIiB,QAAJ,CAAaV,QAAQ,CAAR,EAAWW,IAAxB;AACD,GATH;AAWD,CAbD;;AAeAxC,IAAIkC,IAAJ,CAAS,uBAAT,EAAkC,UAACb,GAAD,EAAMC,GAAN,EAAc;AAC9ChC,WAASiC,KAAT,CAAe,gBAAMC,MAAN,CAAahC,UAAUI,MAAvB,EAA+B,CAACyB,IAAIW,IAAJ,CAASS,KAAV,EAAiBpB,IAAII,MAAJ,CAAWQ,EAA5B,CAA/B,CAAf,EACE,UAACL,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC1B,QAAIF,KAAJ,EAAW;AACTxD,cAAQC,GAAR,CAAYuD,KAAZ;AACAN,UAAIS,UAAJ,CAAe,GAAf;AACA;AACD;AACD3D,YAAQC,GAAR,CAAYwD,OAAZ;AACAP,QAAId,IAAJ,CAASqB,OAAT;AACD,GATH;AAWD,CAZD;;AAcA7B,IAAIgB,GAAJ,CAAQ,gBAAR,EAA0B,UAACK,GAAD,EAAMC,GAAN,EAAc;AACtChC,WAASiC,KAAT,CAAe,gBAAMC,MAAN,CAAahC,UAAUG,UAAvB,EAAmC,CAAC+C,SAASrB,IAAII,MAAJ,CAAWQ,EAApB,EAAwB,EAAxB,CAAD,CAAnC,CAAf,EACE,UAACL,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC1B,QAAIF,KAAJ,EAAW;AACTxD,cAAQC,GAAR,CAAYuD,KAAZ;AACAN,UAAIS,UAAJ,CAAe,GAAf;AACA;AACD;AACD3D,YAAQC,GAAR,CAAYwD,OAAZ;AACAP,QAAId,IAAJ,CAASqB,OAAT;AACD,GATH;AAWD,CAZD;;AAcA7B,IAAIgB,GAAJ,CAAQ,YAAR,EAAsB,UAACK,GAAD,EAAMC,GAAN,EAAc;AAChClD,UAAQC,GAAR,CAAY,gBAAZ,EAA8BgD,IAAIN,OAAlC;AACFzB,WAASiC,KAAT,CAAe/B,UAAUE,SAAzB,EACE,UAACkC,KAAD,EAAQC,OAAR,EAAiBc,KAAjB,EAA2B;AACzB,QAAIf,KAAJ,EAAW;AACTxD,cAAQC,GAAR,CAAYuD,KAAZ;AACAN,UAAIS,UAAJ,CAAe,GAAf;AACA;AACD;AACD3D,YAAQC,GAAR,CAAY,gBAAZ,EAA8BgD,IAAIN,OAAlC;AACA3C,YAAQC,GAAR,CAAYwD,OAAZ;AACAP,QAAId,IAAJ,CAASqB,OAAT;AACD,GAVH;AAYD,CAdD;;AAgBA7B,IAAIkC,IAAJ,CAAS,SAAT,EAAoBjC,OAAO2C,MAAP,CAAc,KAAd,CAApB,EAA0C,UAACvB,GAAD,EAAMC,GAAN,EAAc;AACtD,MAAIuB,OAAOxB,IAAIwB,IAAf;AACA;AACAvD,WAASiC,KAAT,CAAe,gBAAMC,MAAN,CAAahC,UAAUC,MAAvB,EACb,CACE,CADF,EAEEoD,KAAKC,YAFP,EAGED,KAAKL,IAHP,EAIEK,KAAKE,QAJP,EAKEF,KAAKG,QALP,CADa,CAAf,EAQE,UAACpB,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AAC1B,QAAIF,KAAJ,EAAW;AACTxD,cAAQC,GAAR,CAAYuD,KAAZ;AACAN,UAAIS,UAAJ,CAAe,GAAf;AACA;AACD;AACD3D,YAAQC,GAAR,CAAYwD,OAAZ;AACAP,QAAId,IAAJ,CAAS,EAAEyB,IAAIJ,QAAQoB,QAAd,EAAT;AACD,GAhBH;AAkBD,CArBD;;AAwBA;AACAjD,IAAIgB,GAAJ,CAAQ,GAAR,EAAa,UAACK,GAAD,EAAMC,GAAN,EAAc;AACvBlD,UAAQC,GAAR,CAAY,gBAAZ,EAA8BgD,IAAIN,OAAlC;AACF3C,UAAQC,GAAR,CAAY,UAAZ,EAAwBiC,SAAxB;AACAlC,UAAQC,GAAR,CAAY,4BAAZ,EAA0C,eAAKgC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,kBAA9B,EAAkD,YAAlD,CAA1C;AACAlC,UAAQC,GAAR,CAAY,4BAAZ,EAA0C,eAAKgC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,kBAA9B,EAAkD,YAAlD,CAA1C;AACA,MAAIrC,QAAQC,GAAR,CAAYkC,YAAhB,EAA8B;AAC5BkB,QAAI4B,QAAJ,CAAa,eAAK7C,OAAL,CAAaF,eAAb,EAA8B,YAA9B,CAAb;AACD,GAFD,MAEO;AACLmB,QAAI4B,QAAJ,CAAa,eAAK7C,OAAL,CAAaF,eAAb,EAA8B,YAA9B,CAAb;AACD;AACF,CAVD;;AAYAH,IAAImD,GAAJ,CAAQ,MAAR,EAAiBlF,QAAQC,GAAR,CAAYkF,IAAZ,IAAoB,IAArC;;AAEApD,IAAIqD,MAAJ,CAAWrD,IAAIgB,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAChC5C,UAAQC,GAAR,4BAAqC2B,IAAIgB,GAAJ,CAAQ,MAAR,CAArC;AACD,CAFD","file":"index.js","sourcesContent":["import bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport express from 'express';\nimport session from 'express-session';\nimport morgan from 'morgan';\nimport mysql from 'mysql';\nimport multer from 'multer';\nimport passport from 'passport';\nimport GoogleAuth from 'passport-google-oauth2';\nimport path from 'path';\nimport DbIniter from './db/db';\n\n// API Access link for creating client ID and secret:\n// https://code.google.com/apis/console/\nvar GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID\n  , GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\nconsole.log('GOOGLE STUFF:', GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET);\n// Passport session setup.\n//   To support persistent login sessions, Passport needs to be able to\n//   serialize users into and deserialize users out of the session.  Typically,\n//   this will be as simple as storing the user ID when serializing, and finding\n//   the user by ID when deserializing.  However, since this example does not\n//   have a database of user records, the complete Google profile is\n//   serialized and deserialized.\npassport.serializeUser(function (user, done) {\n  console.log('Serialize', user);\n  done(null, user);\n});\n\npassport.deserializeUser(function (obj, done) {\n  console.log('Deserialize', obj);\n  done(null, obj);\n});\n\n// Use the GoogleStrategy within Passport.\n//   Strategies in Passport require a `verify` function, which accept\n//   credentials (in this case, an accessToken, refreshToken, and Google\n//   profile), and invoke a callback with a user object.\npassport.use(new GoogleAuth.Strategy({\n  clientID: GOOGLE_CLIENT_ID,\n  clientSecret: GOOGLE_CLIENT_SECRET,\n  //NOTE :\n  //Carefull ! and avoid usage of Private IP, otherwise you will get the device_id device_name issue for Private IP during authentication\n  //The workaround is to set up thru the google cloud console a fully qualified domain name such as http://mydomain:3000/ \n  //then edit your /etc/hosts local file to point on your private IP. \n  //Also both sign-in button + callbackURL has to be share the same url, otherwise two cookies will be created and lead to lost your session\n  //if you use it.\n  callbackURL: \"http://morning-stream-82096.herokuapp.com/auth/google/callback\",\n  passReqToCallback: true\n},\n  function (request, accessToken, refreshToken, profile, done) {\n    // asynchronous verification, for effect...\n    console.log('verificatoin???', accessToken, refreshToken, profile, done);\n    process.nextTick(function () {\n\n      // To keep the example simple, the user's Google profile is returned to\n      // represent the logged-in user.  In a typical application, you would want\n      // to associate the Google account with a user record in your database,\n      // and return that user instead.\n      console.log('Profile', profile)\n      return done(null, profile);\n    });\n  }\n));\n\nlet dbIniter = new DbIniter();\ndbIniter.initDB();\n\nlet documents = {\n  insert:\n  'INSERT INTO documents \\\n     VALUES (?, ?, ?, ?, ?)',\n  selectAll:\n  'SELECT * \\\n     FROM documents',\n  selectById:\n  'SELECT * \\\n     FROM documents \\\n     WHERE id = ?',\n  update:\n  'UPDATE documents \\\n     SET title = ? \\\n     WHERE id = ?',\n}\n\nlet highlights = {\n  insert:\n  'INSERT INTO highlights \\\n     VALUES (?, ?, ?, ?, ?, ?, ?)',\n  delete:\n  'DELETE FROM highlights \\\n     WHERE id = ? \\\n     AND document_id = ? \\\n     AND user_id = ?',\n  selectByDocumentAndUser:\n  'SELECT * \\\n     FROM highlights \\\n     WHERE document_id = ? \\\n     AND user_id = ?',\n}\n\nlet app = express();\nlet upload = multer({ dest: 'uploads/' });\n\nlet buildFolderPath = process.env.DATABASE_URL ? path.resolve(__dirname, './', 'WimerReact/build')\n  : path.resolve(__dirname, '..', 'WimerReact/build')\n// logger\napp.use(morgan(':remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] :response-time ms'));\n// Serve static assets\napp.use(express.static(buildFolderPath));\napp.use(bodyParser.json());\napp.use( session({ \n\tsecret: 'cookie_secret',\n\tname:   'sessonIdName',\n\tproxy:  true,\n    resave: true,\n    saveUninitialized: true\n}));\napp.use(passport.initialize());\napp.use(passport.session());\n\n// GET /auth/google\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  The first step in Google authentication will involve\n//   redirecting the user to google.com.  After authorization, Google\n//   will redirect the user back to this application at /auth/google/callback\napp.get('/auth/google', passport.authenticate('google', {\n  scope: [\n    'https://www.googleapis.com/auth/plus.login',\n    'https://www.googleapis.com/auth/plus.profile.emails.read']\n}));\n\n// GET /auth/google/callback\n//   Use passport.authenticate() as route middleware to authenticate the\n//   request.  If authentication fails, the user will be redirected back to the\n//   login page.  Otherwise, the primary route function function will be called,\n//   which, in this example, will redirect the user to the home page.\napp.get('/auth/google/callback',\n  passport.authenticate('google', {\n    successRedirect: '/',\n    failureRedirect: '/login'\n  }));\n\n\n\napp.get('/highlight/:documentId/:userId', (req, res) => {\n  dbIniter.query(mysql.format(highlights.selectByDocumentAndUser,\n    [\n      req.params.documentId,\n      req.params.userId,\n    ]\n  ),\n    (error, results, fields) => {\n      if (error) {\n        console.log(error);\n        res.sendStatus(500);\n        return;\n      }\n      console.log(results);\n      res.json(results);\n    }\n  )\n})\n\napp.delete('/highlight', (req, res) => {\n  dbIniter.query(mysql.format(highlights.delete,\n    [\n      req.body.id,\n      req.body.documentId,\n      req.body.userId,\n    ]\n  ),\n    (error, results, fields) => {\n      if (error) {\n        console.log(error);\n        res.sendStatus(500);\n        return;\n      }\n      console.log(fields);\n      res.sendStatus(200);\n    }\n  )\n})\n\napp.post('/highlight', (req, res) => {\n  // save highlight from body\n  dbIniter.query(mysql.format(highlights.insert,\n    [\n      req.body.id,\n      req.body.start,\n      req.body.end,\n      req.body.class,\n      req.body.container,\n      req.body.documentId,\n      req.body.userId,\n    ]\n  ),\n    (error, results, fields) => {\n      if (error) {\n        console.log(error);\n        res.sendStatus(500);\n        return;\n      }\n      console.log(results);\n      res.sendStatus(200);\n    }\n  )\n})\n\napp.get('/documents/download/:id', (req, res) => {\n  console.log(mysql.format(documents.selectById, [req.params.id]));\n  dbIniter.query(mysql.format(documents.selectById, [req.params.id]),\n    (error, results, fields) => {\n      if (error) {\n        console.log(error);\n        res.sendStatus(500);\n        return;\n      }\n      console.log(results);\n      res.download(results[0].path);\n    }\n  )\n})\n\napp.post('/documents/update/:id', (req, res) => {\n  dbIniter.query(mysql.format(documents.update, [req.body.title, req.params.id]),\n    (error, results, fields) => {\n      if (error) {\n        console.log(error);\n        res.sendStatus(500);\n        return;\n      }\n      console.log(results);\n      res.json(results);\n    }\n  )\n})\n\napp.get('/documents/:id', (req, res) => {\n  dbIniter.query(mysql.format(documents.selectById, [parseInt(req.params.id, 10)]),\n    (error, results, fields) => {\n      if (error) {\n        console.log(error);\n        res.sendStatus(500);\n        return;\n      }\n      console.log(results);\n      res.json(results);\n    }\n  )\n})\n\napp.get('/documents', (req, res) => {\n    console.log('------ Session', req.session);\n  dbIniter.query(documents.selectAll,\n    (error, results, field) => {\n      if (error) {\n        console.log(error);\n        res.sendStatus(500);\n        return;\n      }\n      console.log('------ Session', req.session);      \n      console.log(results);\n      res.json(results);\n    }\n  )\n})\n\napp.post('/upload', upload.single('doc'), (req, res) => {\n  let file = req.file;\n  // save document info to db\n  dbIniter.query(mysql.format(documents.insert,\n    [\n      0,\n      file.originalname,\n      file.path,\n      file.mimetype,\n      file.encoding,\n    ]),\n    (error, results, fields) => {\n      if (error) {\n        console.log(error);\n        res.sendStatus(500);\n        return;\n      }\n      console.log(results);\n      res.json({ id: results.insertId });\n    }\n  )\n})\n\n\n// Always return the main index.html, so react-router render the route in the client\napp.get('*', (req, res) => {\n    console.log('------ Session', req.session);\n  console.log(\"dirname:\", __dirname)\n  console.log('--------- INDEX.HTML path:', path.resolve(__dirname, '..', 'WimerReact/build', 'index.html'));\n  console.log('--------- INDEX.HTML path:', path.resolve(__dirname, './', 'WimerReact/build', 'index.html'));\n  if (process.env.DATABASE_URL) {\n    res.sendFile(path.resolve(buildFolderPath, 'index.html'));\n  } else {\n    res.sendFile(path.resolve(buildFolderPath, 'index.html'));\n  }\n});\n\napp.set('port', (process.env.PORT || 3001));\n\napp.listen(app.get('port'), () => {\n  console.log(`App listening on port ${app.get(\"port\")}!`);\n});"]}