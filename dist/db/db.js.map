{"version":3,"sources":["../../src/db/db.js"],"names":["DbInitializer","setupConnection","connection","dbUrl","process","env","DATABASE_URL","console","log","createConnection","host","user","password","database","on","err","initDB","initTables","initSchema","query","changeUser","queryWithConnection","queryString","nextQuery","sql","error","results","fields","callback"],"mappings":";;;;;;AAAA;;;;;;;;IACqBA,a,GAEnB,yBAAc;AAAA;;AAAA;;AAAA,OAIdC,eAJc,GAII,YAAM;AACtB,QAAI,MAAKC,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,UAAIC,QAAQC,QAAQC,GAAR,CAAYC,YAAxB;AACAC,cAAQC,GAAR,CAAY,cAAZ,EAA4BL,KAA5B;AACA,UAAIA,KAAJ,EAAW;AACT,cAAKD,UAAL,GAAkB,gBAAMO,gBAAN,CAAuBN,KAAvB,CAAlB;AACD,OAFD,MAEO;AACL,cAAKD,UAAL,GAAkB,gBAAMO,gBAAN,CAAuB;AACvCC,gBAAM,WADiC;AAEvCC,gBAAM,MAFiC;AAGvCC,oBAAU,MAH6B;AAIvCC,oBAAU;AAJ6B,SAAvB,CAAlB;AAMD;AACF;AACD,UAAKX,UAAL,CAAgBY,EAAhB,CAAmB,OAAnB,EAA4B,UAACC,GAAD,EAAS;AACnCR,cAAQC,GAAR,CAAY,mBAAZ,EAAiCO,GAAjC;AACA,YAAKb,UAAL,GAAkB,IAAlB;AACA,YAAKD,eAAL;AACD,KAJD;AAKD,GAxBa;;AAAA,OA0Bde,MA1Bc,GA0BL,YAAM;AACb,UAAKf,eAAL;AACA,UAAKgB,UAAL;AACD,GA7Ba;;AAAA,OA+BdC,UA/Bc,GA+BD,YAAM;AACjB,UAAKC,KAAL,CAAW,qCAAX;AACA,UAAKjB,UAAL,CAAgBkB,UAAhB,CAA2B,EAAEP,UAAU,OAAZ,EAA3B,EAAkD,UAACE,GAAD,EAAS;AACzD,UAAIA,GAAJ,EAAS,MAAMA,GAAN;AACT,YAAKE,UAAL;AACD,KAHD;AAID,GArCa;;AAAA,OAuCdA,UAvCc,GAuCD,YAAM;AACjBV,YAAQC,GAAR,CAAY,aAAZ;AACA,UAAKa,mBAAL,CAAyB;;;;;;;;;2CAAzB,EAUE;AAAA,aAAM,MAAKA,mBAAL,CAAyB;;;;;;;;;;6CAAzB,EAWJ;AAAA,eAAM,MAAKA,mBAAL,CAAyB;;;;;;;4CAAzB,EAQJ;AAAA,iBAAM,MAAKA,mBAAL,CAAyB;;;;;;4CAAzB,EAOJ,YAAM;AACJ;AACAd,oBAAQC,GAAR,CAAY,oBAAZ;AACD,WAVG,CAAN;AAAA,SARI,CAAN;AAAA,OAXI,CAAN;AAAA,KAVF;AA0CD,GAnFa;;AAAA,OAqFda,mBArFc,GAqFQ,UAACC,WAAD,EAAcC,SAAd,EAA4B;AAChD,UAAKrB,UAAL,CAAgBiB,KAAhB,CAAsB,EAAEK,KAAKF,WAAP,EAAtB,EAA4C,UAACG,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACtE,UAAIF,KAAJ,EAAWlB,QAAQC,GAAR,CAAYiB,KAAZ;AACX,UAAIF,SAAJ,EAAeA;AAChB,KAHD;AAID,GA1Fa;;AAAA,OA4FdJ,KA5Fc,GA4FN,UAACG,WAAD,EAAcM,QAAd,EAA2B;AACjC;AACA,UAAK1B,UAAL,CAAgBiB,KAAhB,CAAsB,EAAEK,KAAKF,WAAP,EAAtB,EAA4C,UAACG,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAA4B;AACtEC,eAASH,KAAT,EAAgBC,OAAhB,EAAyBC,MAAzB;AACA;AACD,KAHD;AAID,GAlGa;;AACZ,OAAKzB,UAAL,GAAkB,IAAlB;AACD,C;;kBAJkBF,a","file":"db.js","sourcesContent":["import mysql from 'mysql';\nexport default class DbInitializer {\n\n  constructor() {\n    this.connection = null;\n  }\n\n  setupConnection = () => {\n    if (this.connection == null) {\n      let dbUrl = process.env.DATABASE_URL;\n      console.log('DATABASE_URL', dbUrl);\n      if (dbUrl) {\n        this.connection = mysql.createConnection(dbUrl);\n      } else {\n        this.connection = mysql.createConnection({\n          host: 'localhost',\n          user: 'root',\n          password: 'root',\n          database: 'wimer'\n        })\n      }\n    }\n    this.connection.on('error', (err) => {\n      console.log('Connection Error:', err);\n      this.connection = null;\n      this.setupConnection();\n    })\n  }\n\n  initDB = () => {\n    this.setupConnection();\n    this.initTables();\n  }\n\n  initSchema = () => {\n    this.query(\"CREATE DATABASE IF NOT EXISTS wimer\");\n    this.connection.changeUser({ database: 'wimer' }, (err) => {\n      if (err) throw err;\n      this.initTables();\n    });\n  }\n\n  initTables = () => {\n    console.log('Initing db.')\n    this.queryWithConnection(\"\\\n      CREATE TABLE IF NOT EXISTS `documents` (\\\n      `id` int(11) NOT NULL AUTO_INCREMENT,\\\n      `title` varchar(255) NOT NULL,\\\n      `path` varchar(512) NOT NULL,\\\n      `type` varchar(45) NOT NULL,\\\n      `encoding` varchar(45) NOT NULL,\\\n      `user_id` int(11) NOT NULL,\\\n      PRIMARY KEY (`id`, `user_id`)\\\n    ) ENGINE=InnoDB DEFAULT CHARSET=latin1\",\n      () => this.queryWithConnection(\"\\\n      CREATE TABLE IF NOT EXISTS `highlights` (\\\n      `id` int(11) NOT NULL AUTO_INCREMENT,\\\n      `start` int(11) NOT NULL,\\\n      `end` int(11) NOT NULL,\\\n      `class` varchar(45) NOT NULL,\\\n      `container` varchar(45) NOT NULL,\\\n      `document_id` int(11) NOT NULL,\\\n      `user_id` int(11) NOT NULL,\\\n      PRIMARY KEY (`id`,`document_id`,`user_id`)\\\n    ) ENGINE=InnoDB  DEFAULT CHARSET=latin1;\",\n        () => this.queryWithConnection(\"\\\n      CREATE TABLE IF NOT EXISTS `users` (\\\n      `id` int(11) NOT NULL AUTO_INCREMENT,\\\n      `name` varchar(255) NOT NULL,\\\n      `email` varchar(255) NOT NULL,\\\n      `google_id` varchar(45) NOT NULL,\\\n      PRIMARY KEY (`id`)\\\n    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;\",\n          () => this.queryWithConnection(\"\\\n      CREATE TABLE IF NOT EXISTS `visits` (\\\n      `user_id` INT NOT NULL,\\\n      `document_id` INT NOT NULL,\\\n      `document_user_id` INT NOT NULL,\\\n      `date` DATETIME NOT NULL\\\n    ) ENGINE=InnoDB DEFAULT CHARSET=latin1;\",\n            () => {\n              // this.connection.end();\n              console.log('Initiing finished!');\n            }\n          ))));\n\n  }\n\n  queryWithConnection = (queryString, nextQuery) => {\n    this.connection.query({ sql: queryString }, (error, results, fields) => {\n      if (error) console.log(error);\n      if (nextQuery) nextQuery();\n    })\n  }\n\n  query = (queryString, callback) => {\n    // this.connection.connect();\n    this.connection.query({ sql: queryString }, (error, results, fields) => {\n      callback(error, results, fields);\n      // this.connection.end();\n    });\n  }\n\n\n}"]}